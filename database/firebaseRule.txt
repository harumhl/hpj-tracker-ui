rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read: if true
    }
    match /categories/{categoryId} {
    	allow create: if signedIn() && createCategory()
    }
    match /goals/{goalId} {
    	allow create: if signedIn() && createGoal()
      allow update: if signedIn() && updateGoal()
      allow delete: if signedIn()
    }
    match /entries/{entryId} {
    	allow create: if signedIn() && createEntry()
      allow delete: if signedIn()

      match /goals/{subentryId} {
      	allow create: if signedIn() && createSubentry()
        allow update: if signedIn() && updateSubentry()
	      allow delete: if signedIn()
      }
    }

    match /test_categories/{categoryId} {
    	allow create: if signedIn() && createCategory()
    }
    match /test_goals/{goalId} {
    	allow create: if signedIn() && createGoal()
      allow update: if signedIn() && updateGoal()
      allow delete: if signedIn()
    }
    match /test_entries/{entryId} {
    	allow create: if signedIn() && createEntry()
      allow delete: if signedIn()

      match /test_goals/{subentryId} {
      	allow create: if signedIn() && createSubentry()
        allow update: if signedIn() && updateSubentry()
	      allow delete: if signedIn()
      }
    }


    function signedIn() {
      return request.auth.uid == ''
    }
    function existingData() {
      return resource.data;
    }
    function incomingData() {
      return request.resource.data;
    }
    function createCategory() {
    	return incomingData().size() == 1
      && incomingData().keys().hasOnly(['category'])
      && incomingData().category is string
    }
    function createGoal() {
    	return incomingData().size() == 7
      && incomingData().keys().hasOnly(['category', 'name', 'archived', 'goalCount', 'unit', 'expectedTimesOfCompletion', 'details'])
      && incomingData().category is string
      && incomingData().name is string
      && incomingData().archived is bool
      && incomingData().goalCount is int
      && incomingData().unit is string
      && (incomingData().details is string || incomingData().details == '')
    }
    function updateGoal() {
    	return incomingData().size() == 7
      && incomingData().keys().hasOnly(['category', 'name', 'archived', 'goalCount', 'unit', 'expectedTimesOfCompletion', 'details'])
      && incomingData().category == existingData().category
      && incomingData().name == existingData().name
      && incomingData().archived is bool
      && incomingData().goalCount is int
      && incomingData().unit is string
      && (incomingData().details is string || incomingData().details == '')
    }
    function createEntry() {
    	return incomingData().size() == 1
      && incomingData().keys().hasOnly(['doneDate'])
      && incomingData().doneDate is string
    }
    function createSubentry() {
    	return incomingData().size() == 4
      && incomingData().keys().hasOnly(['category', 'name', 'count', 'goalCount'])
      && incomingData().category is string
      && incomingData().name is string
      && incomingData().count is int
      && incomingData().goalCount is int
    }
    function updateSubentry() {
    	return incomingData().size() == 4
      && incomingData().keys().hasOnly(['category', 'name', 'count', 'goalCount'])
      && incomingData().count is float
      && incomingData().category == existingData().category
      && incomingData().name == existingData().name
      && incomingData().goalCount == existingData().goalCount
    }
  }
}
